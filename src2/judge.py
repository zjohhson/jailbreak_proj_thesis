from language_models import GPT

def load_judge(model_name):
    if "gpt" in model_name:
        return GPTJudge(model_name)
    # elif args.judge_model == "no-judge":
    #     return NoJudge(args)
    else:
        raise NotImplementedError

class JudgeLM():
    def __init__(self, model_name):
        self.model_name = model_name
    
class GPTJudge(JudgeLM):
    def __init__(self, model_name):
        super(GPTJudge, self).__init__(model_name)
        self.model = GPT(model_name = self.model_name)

    # Getting judge rating for the roleplay prompt generated by adversary    
    def judge_prompt(self, prompt):
        judge_messages = self.model.get_judge_messages(prompt) # System prompts that we feed into API request
        (judge_answer, in_tokens, out_tokens) = self.model.generate_text(judge_messages, True)
        return (judge_answer, in_tokens, out_tokens)
    
    def fine_tune(self, training_file_name):
        return self.model.fine_tune_model(training_file_name, 'judge')